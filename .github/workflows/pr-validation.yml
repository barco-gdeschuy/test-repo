# Unique name on this workflow
name: Pull request validation

# Definition when the workflow should run
on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: Target org
        options: 
        - DEV
        - UAT
  pull_request:
    types: [opened, synchronize, reopened]
    branches: 
      - main
    paths:
      - 'force-app/**'

# Jobs to be executed
jobs:
  check-only-build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            npm install sfdx-cli --global
            sfdx version

      # Install delta deployment tool
      - name: 'Install sfdx-git-delta'
        run: |
            echo y | sfdx plugins:install sfdx-git-delta
            sfdx plugins

      # Populate auth file with GitHub secret
      - name: 'Populate auth file'
        shell: bash
        run: |
            echo "${{ secrets.SFDX_URL_DEV }}" > ./sfdx_url_dev.txt
            if [ $(wc -c "./sfdx_url_dev.txt" | awk '{print $1}') == 1 ]; then
              echo "Github secret missing";
              exit 1;
            fi

      # Authenticate to org
      - name: 'Authenticate org'
        run: sfdx auth:sfdxurl:store -f ./sfdx_url_dev.txt -a devhub -d -s

      # Get commit id
      - name: 'Get commit id'
        shell: bash
        run: |
            if [ -z "${{ vars.TAG }}" ]; then
              echo "GIT_HASH=HEAD^" >> "$GITHUB_ENV"
            else 
              echo "GIT_HASH=$(git rev-list -n 1 ${{ vars.TAG }})" >>  "$GITHUB_ENV"
            fi
      
      # Create delta package
      - name: 'Create delta package'
        shell: bash
        run: |
            mkdir delta-src/
            sfdx sgd:source:delta --to "HEAD" --from ${{ env.GIT_HASH }} --output delta-src/ --generate-delta --source force-app/
            if [ $(wc -l "delta-src/package/package.xml") <= 4]; then
              echo "Empty package xml"
              exit 1;
            else
              echo; cat delta-src/package/package.xml
            fi
      
      # Run PMD code scan on delta
      - name: 'Run PMD code scan'
        uses: pmd/pmd-github-action@v1.3.0
        id: pmd
        with:
          sourcePath: 'delta-src'
          rulesets: 'ruleset.xml'
        
      # Check for PMD violations
      - name: 'Check PMD violations'
        if: steps.pmd.outputs.violations != 0
        run: exit 1
        
      # Deploy source to org
      - name: 'Deploy source to org'
        run: sfdx force:source:deploy -p "delta-src/force-app" --checkonly --json